{
  "meta": {
    "project": "OpenFav V6",
    "date": "2025-09-13",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "OpenFav V6 is a modern web application designed to help users organize and manage their digital resources efficiently. It offers a responsive interface with robust theme customization options, user authentication, dynamic content loading, and smooth navigation, ensuring a seamless and personalized user experience.",
  "core_goals": [
    "Provide a responsive and customizable theme system supporting light, dark, and system preferences with persistent settings and smooth transitions.",
    "Implement secure and flexible user authentication including email/password and social login with session management and protected routes.",
    "Enable dynamic content loading and code-splitting to optimize performance and bundle size.",
    "Offer a well-structured navigation system featuring client-side routing, breadcrumbs, responsive menus, and loading states that enhance usability.",
    "Ensure accessibility compliance and multi-browser support to reach a broad user base.",
    "Maintain high performance with fast load times, timely interactivity, and minimized bundle sizes."
  ],
  "key_features": [
    "Theme System supporting Light/Dark/System modes with system preference detection and persistent user settings.",
    "User Authentication via email/password and Google social login with session management, protected routes, and user profile handling.",
    "Responsive Navigation including client-side routing with history management, breadcrumb support, and adaptable menus.",
    "DynamicWrapper component enabling lazy-loading and code-splitting with React Suspense and error boundary handling.",
    "Reusable UI Components like ThemeToggle, Navbar, and AuthForm providing smooth interactions and feedback.",
    "Robust testing strategy comprising unit, component, integration, E2E, and visual regression tests to ensure quality and reliability."
  ],
  "user_flow_summary": [
    "Authentication Flow: User accesses login page, selects sign-in method (email/password or social), authenticates, then is redirected to dashboard with session persistence.",
    "Theme Switching: User toggles theme via header control, chooses desired mode (Light/Dark/System), which is saved locally and applied immediately with smooth transition.",
    "Navigation: User clicks on links triggering dynamic lazy loading of components, displaying loading states and animated page transitions, with browser history updates."
  ],
  "validation_criteria": [
    "First Contentful Paint (FCP) should be less than 1.5 seconds to ensure fast loading.",
    "Time to Interactive (TTI) should be achieved in under 3 seconds for responsiveness.",
    "Bundle size must be kept below 150KB gzipped to optimize delivery and performance.",
    "Application must meet WCAG 2.1 AA accessibility standards including keyboard navigation, screen reader support, and proper color contrasts.",
    "Supporting latest browser versions of Chrome, Firefox, Safari, Edge, and mobile browsers for iOS and Android; excluding IE11.",
    "Unit and component tests must cover all utilities and UI components with integration and E2E tests validating critical user flows.",
    "Code quality maintained with proper TypeScript typing, documentation, and adherence to Atomic Design and semantic versioning guidelines."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Astro 5",
      "React 18",
      "Tailwind CSS",
      "Vite 7",
      "Vitest 3",
      "Testing Library (React)",
      "Node.js 21"
    ],
    "features": [
      {
        "name": "Dynamic Component Loader (Vite glob)",
        "description": "Discovers and lazy-loads React components at runtime using import.meta.glob registry. Supports alias normalization, base directory prefixes, bare-name resolution, and index.* conventions.",
        "files": [
          "src/react/lib/autoComponentLoader.ts"
        ]
      },
      {
        "name": "Dynamic Wrapper (Suspense + ErrorBoundary)",
        "description": "Runtime wrapper that resolves component config via getDynamicComponent, renders lazy-loaded components with Suspense fallback, and handles load errors with react-error-boundary.",
        "files": [
          "src/react/wrappers/dynamicWrapper.tsx",
          "src/react/components/common/LoadFallback.tsx"
        ]
      },
      {
        "name": "Astro Dynamic Builder Route",
        "description": "Astro catch-all page that maps URL segments to component paths (kebab to PascalCase), preserves base directories, and renders the React component through DynamicWrapper inside the main layout.",
        "files": [
          "src/pages/build/[...component].astro",
          "src/layouts/Layout.astro"
        ]
      },
      {
        "name": "Sample Components for E2E Assertions",
        "description": "Representative React components used by tests to verify dynamic loading behavior.",
        "files": [
          "src/react/components/home/index.tsx",
          "src/react/components/dashboard/TestTracker.tsx"
        ]
      },
      {
        "name": "Utilities and Configuration",
        "description": "Project configs and utilities for TypeScript, Vite, Vitest, Tailwind, and Astro.",
        "files": [
          "package.json",
          "tsconfig.json",
          "vitest.config.ts",
          "tailwind.config.mjs",
          "astro.config.mjs"
        ]
      }
    ]
  }
}
