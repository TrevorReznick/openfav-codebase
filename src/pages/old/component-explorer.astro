---
// src/pages/component-explorer.astro
import Layout from '@/layouts/Layout.astro'

// Component paths from autoLoader configuration
const COMPONENT_BASES = {
  examples: '/src/react/components/examples',
  pages: '/src/components/pages',
  home: '/src/react/components/home',
  common: '/src/react/components/common',
  components: '/src/react/components'
} as const

// Find all React components in the components directory
const findComponents = async () => {
  const fs = await import('node:fs/promises')
  const path = await import('node:path')
  
  const components: Array<{
    name: string
    path: string
    isMapped: boolean
    mappedPath?: string
  }> = []

  // Find all .tsx and .jsx files in components directory, excluding UI components
  const findFiles = async (dir: string, basePath: string) => {
    const entries = await fs.readdir(dir, { withFileTypes: true })
    
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name)
      
      // Skip UI directory and its contents
      if (entry.isDirectory() && entry.name === 'ui') {
        continue;
      }
      
      if (entry.isDirectory()) {
        await findFiles(fullPath, basePath)
      } else if (/\.(tsx|jsx)$/.test(entry.name)) {
        const componentName = entry.name.replace(/\.(tsx|jsx)$/, '')
        const relativePath = path.relative(process.cwd(), fullPath)
        const importPath = relativePath
          .replace(/^src\//, '@/') // Convert to @/ path
          .replace(/\.[jt]sx?$/, '') // Remove extension
        
        // Check if component is mapped in autoComponentLoader
        const mappedPath = Object.entries(COMPONENT_BASES).find(([_, base]) => {
          const relative = path.relative(path.join(process.cwd(), base), fullPath)
          return !relative.startsWith('..') && !path.isAbsolute(relative)
        })
        
        components.push({
          name: componentName,
          path: importPath,
          isMapped: !!mappedPath,
          mappedPath: mappedPath ? `${mappedPath[0]}/${path.relative(path.join(process.cwd(), mappedPath[1]), fullPath).replace(/\.[jt]sx?$/, '')}` : undefined
        })
      }
    }
  }

  await findFiles(path.join(process.cwd(), 'src/react/components'), 'src/react/components')
  
  // Filter out UI components from the final list
  const filteredComponents = components.filter(comp => {
    // Exclude components from ui directory and any component with 'ui/' in its path
    return !comp.path.includes('/ui/') && 
           !comp.path.endsWith('/ui') &&
           !comp.path.includes('components/ui')
  })
  
  return filteredComponents.sort((a, b) => a.name.localeCompare(b.name))
}

const components = await findComponents()
const mappedComponents = components.filter(c => c.isMapped)
const unmappedComponents = components.filter(c => !c.isMapped)
---

<Layout title="Component Explorer">
  <div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6">Component Explorer</h1>
    
    <div class="mb-8">
      <h2 class="text-2xl font-semibold mb-4">Mapped Components</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {mappedComponents.map(comp => (
          <div class="border p-4 rounded-lg shadow-sm">
            <h3 class="font-mono text-lg font-semibold">{comp.name}</h3>
            <div class="text-sm text-gray-600 mb-2">Path: {comp.path}</div>
            <div class="text-sm text-green-600">Mapped as: {comp.mappedPath}</div>
            <div class="mt-2">
              <a 
                href={`/build/${comp.mappedPath}`} 
                class="text-blue-600 hover:underline text-sm"
                target="_blank"
              >
                Open in builder
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>

    {unmappedComponents.length > 0 && (
      <div class="mb-8">
        <h2 class="text-2xl font-semibold mb-4">Unmapped Components</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {unmappedComponents.map(comp => (
            <div class="border p-4 rounded-lg shadow-sm bg-gray-50">
              <h3 class="font-mono text-lg font-semibold">{comp.name}</h3>
              <div class="text-sm text-gray-600">Path: {comp.path}</div>
              <div class="text-sm text-red-600 mt-1">Not mapped in autoComponentLoader</div>
              <div class="mt-2">
                <a 
                  href={`/build/${comp.path.replace('@/', '')}`}
                  class="text-blue-600 hover:underline text-sm"
                  target="_blank"
                >
                  Try to open
                </a>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}
  </div>
</Layout>
